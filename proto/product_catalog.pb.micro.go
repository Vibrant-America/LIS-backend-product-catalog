// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/product_catalog.proto

package productCatalog

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProductCatalogService service

func NewProductCatalogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProductCatalogService service

type ProductCatalogService interface {
	// tax calculation
	CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...client.CallOption) (*CalculateTaxResponse, error)
}

type productCatalogService struct {
	c    client.Client
	name string
}

func NewProductCatalogService(name string, c client.Client) ProductCatalogService {
	return &productCatalogService{
		c:    c,
		name: name,
	}
}

func (c *productCatalogService) CalculateTax(ctx context.Context, in *CalculateTaxRequest, opts ...client.CallOption) (*CalculateTaxResponse, error) {
	req := c.c.NewRequest(c.name, "ProductCatalogService.CalculateTax", in)
	out := new(CalculateTaxResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProductCatalogService service

type ProductCatalogServiceHandler interface {
	// tax calculation
	CalculateTax(context.Context, *CalculateTaxRequest, *CalculateTaxResponse) error
}

func RegisterProductCatalogServiceHandler(s server.Server, hdlr ProductCatalogServiceHandler, opts ...server.HandlerOption) error {
	type productCatalogService interface {
		CalculateTax(ctx context.Context, in *CalculateTaxRequest, out *CalculateTaxResponse) error
	}
	type ProductCatalogService struct {
		productCatalogService
	}
	h := &productCatalogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProductCatalogService{h}, opts...))
}

type productCatalogServiceHandler struct {
	ProductCatalogServiceHandler
}

func (h *productCatalogServiceHandler) CalculateTax(ctx context.Context, in *CalculateTaxRequest, out *CalculateTaxResponse) error {
	return h.ProductCatalogServiceHandler.CalculateTax(ctx, in, out)
}
