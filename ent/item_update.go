// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"productCatalog/ent/item"
	"productCatalog/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where appends a list predicates to the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetType sets the "type" field.
func (iu *ItemUpdate) SetType(i item.Type) *ItemUpdate {
	iu.mutation.SetType(i)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableType(i *item.Type) *ItemUpdate {
	if i != nil {
		iu.SetType(*i)
	}
	return iu
}

// SetTypeID sets the "type_id" field.
func (iu *ItemUpdate) SetTypeID(s string) *ItemUpdate {
	iu.mutation.SetTypeID(s)
	return iu
}

// SetOrderTypeID sets the "order_type_id" field.
func (iu *ItemUpdate) SetOrderTypeID(s string) *ItemUpdate {
	iu.mutation.SetOrderTypeID(s)
	return iu
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableOrderTypeID(s *string) *ItemUpdate {
	if s != nil {
		iu.SetOrderTypeID(*s)
	}
	return iu
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (iu *ItemUpdate) ClearOrderTypeID() *ItemUpdate {
	iu.mutation.ClearOrderTypeID()
	return iu
}

// SetIsOrderable sets the "is_orderable" field.
func (iu *ItemUpdate) SetIsOrderable(b bool) *ItemUpdate {
	iu.mutation.SetIsOrderable(b)
	return iu
}

// SetNillableIsOrderable sets the "is_orderable" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableIsOrderable(b *bool) *ItemUpdate {
	if b != nil {
		iu.SetIsOrderable(*b)
	}
	return iu
}

// SetName sets the "name" field.
func (iu *ItemUpdate) SetName(s string) *ItemUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// ClearName clears the value of the "name" field.
func (iu *ItemUpdate) ClearName() *ItemUpdate {
	iu.mutation.ClearName()
	return iu
}

// SetDisplayName sets the "display_name" field.
func (iu *ItemUpdate) SetDisplayName(s string) *ItemUpdate {
	iu.mutation.SetDisplayName(s)
	return iu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDisplayName(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDisplayName(*s)
	}
	return iu
}

// ClearDisplayName clears the value of the "display_name" field.
func (iu *ItemUpdate) ClearDisplayName() *ItemUpdate {
	iu.mutation.ClearDisplayName()
	return iu
}

// SetUniqueEmrCode sets the "unique_emr_code" field.
func (iu *ItemUpdate) SetUniqueEmrCode(s string) *ItemUpdate {
	iu.mutation.SetUniqueEmrCode(s)
	return iu
}

// SetNillableUniqueEmrCode sets the "unique_emr_code" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableUniqueEmrCode(s *string) *ItemUpdate {
	if s != nil {
		iu.SetUniqueEmrCode(*s)
	}
	return iu
}

// ClearUniqueEmrCode clears the value of the "unique_emr_code" field.
func (iu *ItemUpdate) ClearUniqueEmrCode() *ItemUpdate {
	iu.mutation.ClearUniqueEmrCode()
	return iu
}

// SetTaxCode sets the "tax_code" field.
func (iu *ItemUpdate) SetTaxCode(s string) *ItemUpdate {
	iu.mutation.SetTaxCode(s)
	return iu
}

// SetNillableTaxCode sets the "tax_code" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTaxCode(s *string) *ItemUpdate {
	if s != nil {
		iu.SetTaxCode(*s)
	}
	return iu
}

// ClearTaxCode clears the value of the "tax_code" field.
func (iu *ItemUpdate) ClearTaxCode() *ItemUpdate {
	iu.mutation.ClearTaxCode()
	return iu
}

// SetWeblink sets the "weblink" field.
func (iu *ItemUpdate) SetWeblink(s string) *ItemUpdate {
	iu.mutation.SetWeblink(s)
	return iu
}

// SetNillableWeblink sets the "weblink" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableWeblink(s *string) *ItemUpdate {
	if s != nil {
		iu.SetWeblink(*s)
	}
	return iu
}

// ClearWeblink clears the value of the "weblink" field.
func (iu *ItemUpdate) ClearWeblink() *ItemUpdate {
	iu.mutation.ClearWeblink()
	return iu
}

// SetDescription sets the "description" field.
func (iu *ItemUpdate) SetDescription(s string) *ItemUpdate {
	iu.mutation.SetDescription(s)
	return iu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDescription(s *string) *ItemUpdate {
	if s != nil {
		iu.SetDescription(*s)
	}
	return iu
}

// ClearDescription clears the value of the "description" field.
func (iu *ItemUpdate) ClearDescription() *ItemUpdate {
	iu.mutation.ClearDescription()
	return iu
}

// SetSampleTypeList sets the "sample_type_list" field.
func (iu *ItemUpdate) SetSampleTypeList(s []string) *ItemUpdate {
	iu.mutation.SetSampleTypeList(s)
	return iu
}

// ClearSampleTypeList clears the value of the "sample_type_list" field.
func (iu *ItemUpdate) ClearSampleTypeList() *ItemUpdate {
	iu.mutation.ClearSampleTypeList()
	return iu
}

// SetSubpackagesList sets the "subpackages_list" field.
func (iu *ItemUpdate) SetSubpackagesList(s []string) *ItemUpdate {
	iu.mutation.SetSubpackagesList(s)
	return iu
}

// ClearSubpackagesList clears the value of the "subpackages_list" field.
func (iu *ItemUpdate) ClearSubpackagesList() *ItemUpdate {
	iu.mutation.ClearSubpackagesList()
	return iu
}

// SetSubtestsList sets the "subtests_list" field.
func (iu *ItemUpdate) SetSubtestsList(s []string) *ItemUpdate {
	iu.mutation.SetSubtestsList(s)
	return iu
}

// ClearSubtestsList clears the value of the "subtests_list" field.
func (iu *ItemUpdate) ClearSubtestsList() *ItemUpdate {
	iu.mutation.ClearSubtestsList()
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *ItemUpdate) SetCreatedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableCreatedAt(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ItemUpdate) SetUpdatedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetDeletedAt sets the "deleted_at" field.
func (iu *ItemUpdate) SetDeletedAt(t time.Time) *ItemUpdate {
	iu.mutation.SetDeletedAt(t)
	return iu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableDeletedAt(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetDeletedAt(*t)
	}
	return iu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iu *ItemUpdate) ClearDeletedAt() *ItemUpdate {
	iu.mutation.ClearDeletedAt()
	return iu
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ItemUpdate) check() error {
	if v, ok := iu.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	return nil
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: item.FieldType,
		})
	}
	if value, ok := iu.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTypeID,
		})
	}
	if value, ok := iu.mutation.OrderTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldOrderTypeID,
		})
	}
	if iu.mutation.OrderTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldOrderTypeID,
		})
	}
	if value, ok := iu.mutation.IsOrderable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldIsOrderable,
		})
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
	}
	if iu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldName,
		})
	}
	if value, ok := iu.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDisplayName,
		})
	}
	if iu.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldDisplayName,
		})
	}
	if value, ok := iu.mutation.UniqueEmrCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldUniqueEmrCode,
		})
	}
	if iu.mutation.UniqueEmrCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldUniqueEmrCode,
		})
	}
	if value, ok := iu.mutation.TaxCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTaxCode,
		})
	}
	if iu.mutation.TaxCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldTaxCode,
		})
	}
	if value, ok := iu.mutation.Weblink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldWeblink,
		})
	}
	if iu.mutation.WeblinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldWeblink,
		})
	}
	if value, ok := iu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDescription,
		})
	}
	if iu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldDescription,
		})
	}
	if value, ok := iu.mutation.SampleTypeList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSampleTypeList,
		})
	}
	if iu.mutation.SampleTypeListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSampleTypeList,
		})
	}
	if value, ok := iu.mutation.SubpackagesList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubpackagesList,
		})
	}
	if iu.mutation.SubpackagesListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSubpackagesList,
		})
	}
	if value, ok := iu.mutation.SubtestsList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubtestsList,
		})
	}
	if iu.mutation.SubtestsListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSubtestsList,
		})
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldCreatedAt,
		})
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdatedAt,
		})
	}
	if value, ok := iu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldDeletedAt,
		})
	}
	if iu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: item.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetType sets the "type" field.
func (iuo *ItemUpdateOne) SetType(i item.Type) *ItemUpdateOne {
	iuo.mutation.SetType(i)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableType(i *item.Type) *ItemUpdateOne {
	if i != nil {
		iuo.SetType(*i)
	}
	return iuo
}

// SetTypeID sets the "type_id" field.
func (iuo *ItemUpdateOne) SetTypeID(s string) *ItemUpdateOne {
	iuo.mutation.SetTypeID(s)
	return iuo
}

// SetOrderTypeID sets the "order_type_id" field.
func (iuo *ItemUpdateOne) SetOrderTypeID(s string) *ItemUpdateOne {
	iuo.mutation.SetOrderTypeID(s)
	return iuo
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableOrderTypeID(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetOrderTypeID(*s)
	}
	return iuo
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (iuo *ItemUpdateOne) ClearOrderTypeID() *ItemUpdateOne {
	iuo.mutation.ClearOrderTypeID()
	return iuo
}

// SetIsOrderable sets the "is_orderable" field.
func (iuo *ItemUpdateOne) SetIsOrderable(b bool) *ItemUpdateOne {
	iuo.mutation.SetIsOrderable(b)
	return iuo
}

// SetNillableIsOrderable sets the "is_orderable" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableIsOrderable(b *bool) *ItemUpdateOne {
	if b != nil {
		iuo.SetIsOrderable(*b)
	}
	return iuo
}

// SetName sets the "name" field.
func (iuo *ItemUpdateOne) SetName(s string) *ItemUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// ClearName clears the value of the "name" field.
func (iuo *ItemUpdateOne) ClearName() *ItemUpdateOne {
	iuo.mutation.ClearName()
	return iuo
}

// SetDisplayName sets the "display_name" field.
func (iuo *ItemUpdateOne) SetDisplayName(s string) *ItemUpdateOne {
	iuo.mutation.SetDisplayName(s)
	return iuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDisplayName(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDisplayName(*s)
	}
	return iuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (iuo *ItemUpdateOne) ClearDisplayName() *ItemUpdateOne {
	iuo.mutation.ClearDisplayName()
	return iuo
}

// SetUniqueEmrCode sets the "unique_emr_code" field.
func (iuo *ItemUpdateOne) SetUniqueEmrCode(s string) *ItemUpdateOne {
	iuo.mutation.SetUniqueEmrCode(s)
	return iuo
}

// SetNillableUniqueEmrCode sets the "unique_emr_code" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableUniqueEmrCode(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetUniqueEmrCode(*s)
	}
	return iuo
}

// ClearUniqueEmrCode clears the value of the "unique_emr_code" field.
func (iuo *ItemUpdateOne) ClearUniqueEmrCode() *ItemUpdateOne {
	iuo.mutation.ClearUniqueEmrCode()
	return iuo
}

// SetTaxCode sets the "tax_code" field.
func (iuo *ItemUpdateOne) SetTaxCode(s string) *ItemUpdateOne {
	iuo.mutation.SetTaxCode(s)
	return iuo
}

// SetNillableTaxCode sets the "tax_code" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTaxCode(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetTaxCode(*s)
	}
	return iuo
}

// ClearTaxCode clears the value of the "tax_code" field.
func (iuo *ItemUpdateOne) ClearTaxCode() *ItemUpdateOne {
	iuo.mutation.ClearTaxCode()
	return iuo
}

// SetWeblink sets the "weblink" field.
func (iuo *ItemUpdateOne) SetWeblink(s string) *ItemUpdateOne {
	iuo.mutation.SetWeblink(s)
	return iuo
}

// SetNillableWeblink sets the "weblink" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableWeblink(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetWeblink(*s)
	}
	return iuo
}

// ClearWeblink clears the value of the "weblink" field.
func (iuo *ItemUpdateOne) ClearWeblink() *ItemUpdateOne {
	iuo.mutation.ClearWeblink()
	return iuo
}

// SetDescription sets the "description" field.
func (iuo *ItemUpdateOne) SetDescription(s string) *ItemUpdateOne {
	iuo.mutation.SetDescription(s)
	return iuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDescription(s *string) *ItemUpdateOne {
	if s != nil {
		iuo.SetDescription(*s)
	}
	return iuo
}

// ClearDescription clears the value of the "description" field.
func (iuo *ItemUpdateOne) ClearDescription() *ItemUpdateOne {
	iuo.mutation.ClearDescription()
	return iuo
}

// SetSampleTypeList sets the "sample_type_list" field.
func (iuo *ItemUpdateOne) SetSampleTypeList(s []string) *ItemUpdateOne {
	iuo.mutation.SetSampleTypeList(s)
	return iuo
}

// ClearSampleTypeList clears the value of the "sample_type_list" field.
func (iuo *ItemUpdateOne) ClearSampleTypeList() *ItemUpdateOne {
	iuo.mutation.ClearSampleTypeList()
	return iuo
}

// SetSubpackagesList sets the "subpackages_list" field.
func (iuo *ItemUpdateOne) SetSubpackagesList(s []string) *ItemUpdateOne {
	iuo.mutation.SetSubpackagesList(s)
	return iuo
}

// ClearSubpackagesList clears the value of the "subpackages_list" field.
func (iuo *ItemUpdateOne) ClearSubpackagesList() *ItemUpdateOne {
	iuo.mutation.ClearSubpackagesList()
	return iuo
}

// SetSubtestsList sets the "subtests_list" field.
func (iuo *ItemUpdateOne) SetSubtestsList(s []string) *ItemUpdateOne {
	iuo.mutation.SetSubtestsList(s)
	return iuo
}

// ClearSubtestsList clears the value of the "subtests_list" field.
func (iuo *ItemUpdateOne) ClearSubtestsList() *ItemUpdateOne {
	iuo.mutation.ClearSubtestsList()
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *ItemUpdateOne) SetCreatedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableCreatedAt(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ItemUpdateOne) SetUpdatedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iuo *ItemUpdateOne) SetDeletedAt(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetDeletedAt(t)
	return iuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableDeletedAt(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetDeletedAt(*t)
	}
	return iuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iuo *ItemUpdateOne) ClearDeletedAt() *ItemUpdateOne {
	iuo.mutation.ClearDeletedAt()
	return iuo
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := item.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ItemUpdateOne) check() error {
	if v, ok := iuo.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	return nil
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Item.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: item.FieldType,
		})
	}
	if value, ok := iuo.mutation.TypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTypeID,
		})
	}
	if value, ok := iuo.mutation.OrderTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldOrderTypeID,
		})
	}
	if iuo.mutation.OrderTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldOrderTypeID,
		})
	}
	if value, ok := iuo.mutation.IsOrderable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldIsOrderable,
		})
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
	}
	if iuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldName,
		})
	}
	if value, ok := iuo.mutation.DisplayName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDisplayName,
		})
	}
	if iuo.mutation.DisplayNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldDisplayName,
		})
	}
	if value, ok := iuo.mutation.UniqueEmrCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldUniqueEmrCode,
		})
	}
	if iuo.mutation.UniqueEmrCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldUniqueEmrCode,
		})
	}
	if value, ok := iuo.mutation.TaxCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTaxCode,
		})
	}
	if iuo.mutation.TaxCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldTaxCode,
		})
	}
	if value, ok := iuo.mutation.Weblink(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldWeblink,
		})
	}
	if iuo.mutation.WeblinkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldWeblink,
		})
	}
	if value, ok := iuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDescription,
		})
	}
	if iuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: item.FieldDescription,
		})
	}
	if value, ok := iuo.mutation.SampleTypeList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSampleTypeList,
		})
	}
	if iuo.mutation.SampleTypeListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSampleTypeList,
		})
	}
	if value, ok := iuo.mutation.SubpackagesList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubpackagesList,
		})
	}
	if iuo.mutation.SubpackagesListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSubpackagesList,
		})
	}
	if value, ok := iuo.mutation.SubtestsList(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubtestsList,
		})
	}
	if iuo.mutation.SubtestsListCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: item.FieldSubtestsList,
		})
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldCreatedAt,
		})
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdatedAt,
		})
	}
	if value, ok := iuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldDeletedAt,
		})
	}
	if iuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: item.FieldDeletedAt,
		})
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
