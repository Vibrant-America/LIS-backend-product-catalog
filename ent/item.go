// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"productCatalog/ent/item"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type item.Type `json:"type,omitempty"`
	// TypeID holds the value of the "type_id" field.
	TypeID string `json:"type_id,omitempty"`
	// OrderTypeID holds the value of the "order_type_id" field.
	OrderTypeID string `json:"order_type_id,omitempty"`
	// IsOrderable holds the value of the "is_orderable" field.
	IsOrderable bool `json:"is_orderable,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// UniqueEmrCode holds the value of the "unique_emr_code" field.
	UniqueEmrCode string `json:"unique_emr_code,omitempty"`
	// TaxCode holds the value of the "tax_code" field.
	TaxCode string `json:"tax_code,omitempty"`
	// Weblink holds the value of the "weblink" field.
	Weblink string `json:"weblink,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// SampleTypeList holds the value of the "sample_type_list" field.
	SampleTypeList []string `json:"sample_type_list,omitempty"`
	// SubpackagesList holds the value of the "subpackages_list" field.
	SubpackagesList []string `json:"subpackages_list,omitempty"`
	// SubtestsList holds the value of the "subtests_list" field.
	SubtestsList []string `json:"subtests_list,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldSampleTypeList, item.FieldSubpackagesList, item.FieldSubtestsList:
			values[i] = new([]byte)
		case item.FieldIsOrderable:
			values[i] = new(sql.NullBool)
		case item.FieldID:
			values[i] = new(sql.NullInt64)
		case item.FieldType, item.FieldTypeID, item.FieldOrderTypeID, item.FieldName, item.FieldDisplayName, item.FieldUniqueEmrCode, item.FieldTaxCode, item.FieldWeblink, item.FieldDescription:
			values[i] = new(sql.NullString)
		case item.FieldCreatedAt, item.FieldUpdatedAt, item.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case item.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = item.Type(value.String)
			}
		case item.FieldTypeID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[j])
			} else if value.Valid {
				i.TypeID = value.String
			}
		case item.FieldOrderTypeID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_type_id", values[j])
			} else if value.Valid {
				i.OrderTypeID = value.String
			}
		case item.FieldIsOrderable:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_orderable", values[j])
			} else if value.Valid {
				i.IsOrderable = value.Bool
			}
		case item.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case item.FieldDisplayName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[j])
			} else if value.Valid {
				i.DisplayName = value.String
			}
		case item.FieldUniqueEmrCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unique_emr_code", values[j])
			} else if value.Valid {
				i.UniqueEmrCode = value.String
			}
		case item.FieldTaxCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_code", values[j])
			} else if value.Valid {
				i.TaxCode = value.String
			}
		case item.FieldWeblink:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weblink", values[j])
			} else if value.Valid {
				i.Weblink = value.String
			}
		case item.FieldDescription:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[j])
			} else if value.Valid {
				i.Description = value.String
			}
		case item.FieldSampleTypeList:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sample_type_list", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.SampleTypeList); err != nil {
					return fmt.Errorf("unmarshal field sample_type_list: %w", err)
				}
			}
		case item.FieldSubpackagesList:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subpackages_list", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.SubpackagesList); err != nil {
					return fmt.Errorf("unmarshal field subpackages_list: %w", err)
				}
			}
		case item.FieldSubtestsList:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field subtests_list", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.SubtestsList); err != nil {
					return fmt.Errorf("unmarshal field subtests_list: %w", err)
				}
			}
		case item.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case item.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case item.FieldDeletedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[j])
			} else if value.Valid {
				i.DeletedAt = new(time.Time)
				*i.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", i.Type))
	builder.WriteString(", type_id=")
	builder.WriteString(i.TypeID)
	builder.WriteString(", order_type_id=")
	builder.WriteString(i.OrderTypeID)
	builder.WriteString(", is_orderable=")
	builder.WriteString(fmt.Sprintf("%v", i.IsOrderable))
	builder.WriteString(", name=")
	builder.WriteString(i.Name)
	builder.WriteString(", display_name=")
	builder.WriteString(i.DisplayName)
	builder.WriteString(", unique_emr_code=")
	builder.WriteString(i.UniqueEmrCode)
	builder.WriteString(", tax_code=")
	builder.WriteString(i.TaxCode)
	builder.WriteString(", weblink=")
	builder.WriteString(i.Weblink)
	builder.WriteString(", description=")
	builder.WriteString(i.Description)
	builder.WriteString(", sample_type_list=")
	builder.WriteString(fmt.Sprintf("%v", i.SampleTypeList))
	builder.WriteString(", subpackages_list=")
	builder.WriteString(fmt.Sprintf("%v", i.SubpackagesList))
	builder.WriteString(", subtests_list=")
	builder.WriteString(fmt.Sprintf("%v", i.SubtestsList))
	builder.WriteString(", created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	if v := i.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
