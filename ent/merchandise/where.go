// Code generated by entc, DO NOT EDIT.

package merchandise

import (
	"productCatalog/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStock), v))
	})
}

// PendingPeriod applies equality check predicate on the "pending_period" field. It's identical to PendingPeriodEQ.
func PendingPeriod(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPendingPeriod), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// PictureURL applies equality check predicate on the "picture_url" field. It's identical to PictureURLEQ.
func PictureURL(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPictureURL), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// RefundableRatio applies equality check predicate on the "refundable_ratio" field. It's identical to RefundableRatioEQ.
func RefundableRatio(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundableRatio), v))
	})
}

// DeductionRatio applies equality check predicate on the "deduction_ratio" field. It's identical to DeductionRatioEQ.
func DeductionRatio(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeductionRatio), v))
	})
}

// DeductionReason applies equality check predicate on the "deduction_reason" field. It's identical to DeductionReasonEQ.
func DeductionReason(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeductionReason), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTypeID), v))
	})
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTypeID), v))
	})
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTypeID), v...))
	})
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTypeID), v...))
	})
}

// TypeIDGT applies the GT predicate on the "type_id" field.
func TypeIDGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTypeID), v))
	})
}

// TypeIDGTE applies the GTE predicate on the "type_id" field.
func TypeIDGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTypeID), v))
	})
}

// TypeIDLT applies the LT predicate on the "type_id" field.
func TypeIDLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTypeID), v))
	})
}

// TypeIDLTE applies the LTE predicate on the "type_id" field.
func TypeIDLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTypeID), v))
	})
}

// TypeIDContains applies the Contains predicate on the "type_id" field.
func TypeIDContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTypeID), v))
	})
}

// TypeIDHasPrefix applies the HasPrefix predicate on the "type_id" field.
func TypeIDHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTypeID), v))
	})
}

// TypeIDHasSuffix applies the HasSuffix predicate on the "type_id" field.
func TypeIDHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTypeID), v))
	})
}

// TypeIDIsNil applies the IsNil predicate on the "type_id" field.
func TypeIDIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTypeID)))
	})
}

// TypeIDNotNil applies the NotNil predicate on the "type_id" field.
func TypeIDNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTypeID)))
	})
}

// TypeIDEqualFold applies the EqualFold predicate on the "type_id" field.
func TypeIDEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTypeID), v))
	})
}

// TypeIDContainsFold applies the ContainsFold predicate on the "type_id" field.
func TypeIDContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTypeID), v))
	})
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStock), v))
	})
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStock), v))
	})
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...int) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStock), v...))
	})
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...int) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStock), v...))
	})
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStock), v))
	})
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStock), v))
	})
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStock), v))
	})
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStock), v))
	})
}

// PendingPeriodEQ applies the EQ predicate on the "pending_period" field.
func PendingPeriodEQ(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPendingPeriod), v))
	})
}

// PendingPeriodNEQ applies the NEQ predicate on the "pending_period" field.
func PendingPeriodNEQ(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPendingPeriod), v))
	})
}

// PendingPeriodIn applies the In predicate on the "pending_period" field.
func PendingPeriodIn(vs ...int) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPendingPeriod), v...))
	})
}

// PendingPeriodNotIn applies the NotIn predicate on the "pending_period" field.
func PendingPeriodNotIn(vs ...int) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPendingPeriod), v...))
	})
}

// PendingPeriodGT applies the GT predicate on the "pending_period" field.
func PendingPeriodGT(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPendingPeriod), v))
	})
}

// PendingPeriodGTE applies the GTE predicate on the "pending_period" field.
func PendingPeriodGTE(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPendingPeriod), v))
	})
}

// PendingPeriodLT applies the LT predicate on the "pending_period" field.
func PendingPeriodLT(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPendingPeriod), v))
	})
}

// PendingPeriodLTE applies the LTE predicate on the "pending_period" field.
func PendingPeriodLTE(v int) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPendingPeriod), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIsNil applies the IsNil predicate on the "display_name" field.
func DisplayNameIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisplayName)))
	})
}

// DisplayNameNotNil applies the NotNil predicate on the "display_name" field.
func DisplayNameNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisplayName)))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// PictureURLEQ applies the EQ predicate on the "picture_url" field.
func PictureURLEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPictureURL), v))
	})
}

// PictureURLNEQ applies the NEQ predicate on the "picture_url" field.
func PictureURLNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPictureURL), v))
	})
}

// PictureURLIn applies the In predicate on the "picture_url" field.
func PictureURLIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPictureURL), v...))
	})
}

// PictureURLNotIn applies the NotIn predicate on the "picture_url" field.
func PictureURLNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPictureURL), v...))
	})
}

// PictureURLGT applies the GT predicate on the "picture_url" field.
func PictureURLGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPictureURL), v))
	})
}

// PictureURLGTE applies the GTE predicate on the "picture_url" field.
func PictureURLGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPictureURL), v))
	})
}

// PictureURLLT applies the LT predicate on the "picture_url" field.
func PictureURLLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPictureURL), v))
	})
}

// PictureURLLTE applies the LTE predicate on the "picture_url" field.
func PictureURLLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPictureURL), v))
	})
}

// PictureURLContains applies the Contains predicate on the "picture_url" field.
func PictureURLContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPictureURL), v))
	})
}

// PictureURLHasPrefix applies the HasPrefix predicate on the "picture_url" field.
func PictureURLHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPictureURL), v))
	})
}

// PictureURLHasSuffix applies the HasSuffix predicate on the "picture_url" field.
func PictureURLHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPictureURL), v))
	})
}

// PictureURLIsNil applies the IsNil predicate on the "picture_url" field.
func PictureURLIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPictureURL)))
	})
}

// PictureURLNotNil applies the NotNil predicate on the "picture_url" field.
func PictureURLNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPictureURL)))
	})
}

// PictureURLEqualFold applies the EqualFold predicate on the "picture_url" field.
func PictureURLEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPictureURL), v))
	})
}

// PictureURLContainsFold applies the ContainsFold predicate on the "picture_url" field.
func PictureURLContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPictureURL), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrice), v))
	})
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrice), v))
	})
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrice), v...))
	})
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrice), v...))
	})
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrice), v))
	})
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrice), v))
	})
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrice), v))
	})
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrice), v))
	})
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrice)))
	})
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrice)))
	})
}

// RefundableRatioEQ applies the EQ predicate on the "refundable_ratio" field.
func RefundableRatioEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioNEQ applies the NEQ predicate on the "refundable_ratio" field.
func RefundableRatioNEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioIn applies the In predicate on the "refundable_ratio" field.
func RefundableRatioIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefundableRatio), v...))
	})
}

// RefundableRatioNotIn applies the NotIn predicate on the "refundable_ratio" field.
func RefundableRatioNotIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefundableRatio), v...))
	})
}

// RefundableRatioGT applies the GT predicate on the "refundable_ratio" field.
func RefundableRatioGT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioGTE applies the GTE predicate on the "refundable_ratio" field.
func RefundableRatioGTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioLT applies the LT predicate on the "refundable_ratio" field.
func RefundableRatioLT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioLTE applies the LTE predicate on the "refundable_ratio" field.
func RefundableRatioLTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefundableRatio), v))
	})
}

// RefundableRatioIsNil applies the IsNil predicate on the "refundable_ratio" field.
func RefundableRatioIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefundableRatio)))
	})
}

// RefundableRatioNotNil applies the NotNil predicate on the "refundable_ratio" field.
func RefundableRatioNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefundableRatio)))
	})
}

// DeductionRatioEQ applies the EQ predicate on the "deduction_ratio" field.
func DeductionRatioEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioNEQ applies the NEQ predicate on the "deduction_ratio" field.
func DeductionRatioNEQ(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioIn applies the In predicate on the "deduction_ratio" field.
func DeductionRatioIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeductionRatio), v...))
	})
}

// DeductionRatioNotIn applies the NotIn predicate on the "deduction_ratio" field.
func DeductionRatioNotIn(vs ...float64) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeductionRatio), v...))
	})
}

// DeductionRatioGT applies the GT predicate on the "deduction_ratio" field.
func DeductionRatioGT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioGTE applies the GTE predicate on the "deduction_ratio" field.
func DeductionRatioGTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioLT applies the LT predicate on the "deduction_ratio" field.
func DeductionRatioLT(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioLTE applies the LTE predicate on the "deduction_ratio" field.
func DeductionRatioLTE(v float64) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeductionRatio), v))
	})
}

// DeductionRatioIsNil applies the IsNil predicate on the "deduction_ratio" field.
func DeductionRatioIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeductionRatio)))
	})
}

// DeductionRatioNotNil applies the NotNil predicate on the "deduction_ratio" field.
func DeductionRatioNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeductionRatio)))
	})
}

// DeductionReasonEQ applies the EQ predicate on the "deduction_reason" field.
func DeductionReasonEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonNEQ applies the NEQ predicate on the "deduction_reason" field.
func DeductionReasonNEQ(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonIn applies the In predicate on the "deduction_reason" field.
func DeductionReasonIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeductionReason), v...))
	})
}

// DeductionReasonNotIn applies the NotIn predicate on the "deduction_reason" field.
func DeductionReasonNotIn(vs ...string) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeductionReason), v...))
	})
}

// DeductionReasonGT applies the GT predicate on the "deduction_reason" field.
func DeductionReasonGT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonGTE applies the GTE predicate on the "deduction_reason" field.
func DeductionReasonGTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonLT applies the LT predicate on the "deduction_reason" field.
func DeductionReasonLT(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonLTE applies the LTE predicate on the "deduction_reason" field.
func DeductionReasonLTE(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonContains applies the Contains predicate on the "deduction_reason" field.
func DeductionReasonContains(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonHasPrefix applies the HasPrefix predicate on the "deduction_reason" field.
func DeductionReasonHasPrefix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonHasSuffix applies the HasSuffix predicate on the "deduction_reason" field.
func DeductionReasonHasSuffix(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonIsNil applies the IsNil predicate on the "deduction_reason" field.
func DeductionReasonIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeductionReason)))
	})
}

// DeductionReasonNotNil applies the NotNil predicate on the "deduction_reason" field.
func DeductionReasonNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeductionReason)))
	})
}

// DeductionReasonEqualFold applies the EqualFold predicate on the "deduction_reason" field.
func DeductionReasonEqualFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDeductionReason), v))
	})
}

// DeductionReasonContainsFold applies the ContainsFold predicate on the "deduction_reason" field.
func DeductionReasonContainsFold(v string) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDeductionReason), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Merchandise {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Merchandise(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Merchandise) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Merchandise) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Merchandise) predicate.Merchandise {
	return predicate.Merchandise(func(s *sql.Selector) {
		p(s.Not())
	})
}
