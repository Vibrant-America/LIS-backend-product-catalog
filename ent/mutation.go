// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"productCatalog/ent/item"
	"productCatalog/ent/merchandise"
	"productCatalog/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeItem        = "Item"
	TypeMerchandise = "Merchandise"
)

// ItemMutation represents an operation that mutates the Item nodes in the graph.
type ItemMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_type            *item.Type
	type_id          *string
	order_type_id    *string
	is_orderable     *bool
	name             *string
	display_name     *string
	unique_emr_code  *string
	tax_code         *string
	weblink          *string
	description      *string
	sample_type_list *[]string
	subpackages_list *[]string
	subtests_list    *[]string
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Item, error)
	predicates       []predicate.Item
}

var _ ent.Mutation = (*ItemMutation)(nil)

// itemOption allows management of the mutation configuration using functional options.
type itemOption func(*ItemMutation)

// newItemMutation creates new mutation for the Item entity.
func newItemMutation(c config, op Op, opts ...itemOption) *ItemMutation {
	m := &ItemMutation{
		config:        c,
		op:            op,
		typ:           TypeItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withItemID sets the ID field of the mutation.
func withItemID(id int) itemOption {
	return func(m *ItemMutation) {
		var (
			err   error
			once  sync.Once
			value *Item
		)
		m.oldValue = func(ctx context.Context) (*Item, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Item.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withItem sets the old Item of the mutation.
func withItem(node *Item) itemOption {
	return func(m *ItemMutation) {
		m.oldValue = func(context.Context) (*Item, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Item.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *ItemMutation) SetType(i item.Type) {
	m._type = &i
}

// GetType returns the value of the "type" field in the mutation.
func (m *ItemMutation) GetType() (r item.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldType(ctx context.Context) (v item.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *ItemMutation) ResetType() {
	m._type = nil
}

// SetTypeID sets the "type_id" field.
func (m *ItemMutation) SetTypeID(s string) {
	m.type_id = &s
}

// TypeID returns the value of the "type_id" field in the mutation.
func (m *ItemMutation) TypeID() (r string, exists bool) {
	v := m.type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeID returns the old "type_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeID: %w", err)
	}
	return oldValue.TypeID, nil
}

// ResetTypeID resets all changes to the "type_id" field.
func (m *ItemMutation) ResetTypeID() {
	m.type_id = nil
}

// SetOrderTypeID sets the "order_type_id" field.
func (m *ItemMutation) SetOrderTypeID(s string) {
	m.order_type_id = &s
}

// OrderTypeID returns the value of the "order_type_id" field in the mutation.
func (m *ItemMutation) OrderTypeID() (r string, exists bool) {
	v := m.order_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderTypeID returns the old "order_type_id" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldOrderTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderTypeID: %w", err)
	}
	return oldValue.OrderTypeID, nil
}

// ClearOrderTypeID clears the value of the "order_type_id" field.
func (m *ItemMutation) ClearOrderTypeID() {
	m.order_type_id = nil
	m.clearedFields[item.FieldOrderTypeID] = struct{}{}
}

// OrderTypeIDCleared returns if the "order_type_id" field was cleared in this mutation.
func (m *ItemMutation) OrderTypeIDCleared() bool {
	_, ok := m.clearedFields[item.FieldOrderTypeID]
	return ok
}

// ResetOrderTypeID resets all changes to the "order_type_id" field.
func (m *ItemMutation) ResetOrderTypeID() {
	m.order_type_id = nil
	delete(m.clearedFields, item.FieldOrderTypeID)
}

// SetIsOrderable sets the "is_orderable" field.
func (m *ItemMutation) SetIsOrderable(b bool) {
	m.is_orderable = &b
}

// IsOrderable returns the value of the "is_orderable" field in the mutation.
func (m *ItemMutation) IsOrderable() (r bool, exists bool) {
	v := m.is_orderable
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOrderable returns the old "is_orderable" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldIsOrderable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOrderable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOrderable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOrderable: %w", err)
	}
	return oldValue.IsOrderable, nil
}

// ResetIsOrderable resets all changes to the "is_orderable" field.
func (m *ItemMutation) ResetIsOrderable() {
	m.is_orderable = nil
}

// SetName sets the "name" field.
func (m *ItemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ItemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ItemMutation) ClearName() {
	m.name = nil
	m.clearedFields[item.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ItemMutation) NameCleared() bool {
	_, ok := m.clearedFields[item.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ItemMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, item.FieldName)
}

// SetDisplayName sets the "display_name" field.
func (m *ItemMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ItemMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *ItemMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[item.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *ItemMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[item.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ItemMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, item.FieldDisplayName)
}

// SetUniqueEmrCode sets the "unique_emr_code" field.
func (m *ItemMutation) SetUniqueEmrCode(s string) {
	m.unique_emr_code = &s
}

// UniqueEmrCode returns the value of the "unique_emr_code" field in the mutation.
func (m *ItemMutation) UniqueEmrCode() (r string, exists bool) {
	v := m.unique_emr_code
	if v == nil {
		return
	}
	return *v, true
}

// OldUniqueEmrCode returns the old "unique_emr_code" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUniqueEmrCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUniqueEmrCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUniqueEmrCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUniqueEmrCode: %w", err)
	}
	return oldValue.UniqueEmrCode, nil
}

// ClearUniqueEmrCode clears the value of the "unique_emr_code" field.
func (m *ItemMutation) ClearUniqueEmrCode() {
	m.unique_emr_code = nil
	m.clearedFields[item.FieldUniqueEmrCode] = struct{}{}
}

// UniqueEmrCodeCleared returns if the "unique_emr_code" field was cleared in this mutation.
func (m *ItemMutation) UniqueEmrCodeCleared() bool {
	_, ok := m.clearedFields[item.FieldUniqueEmrCode]
	return ok
}

// ResetUniqueEmrCode resets all changes to the "unique_emr_code" field.
func (m *ItemMutation) ResetUniqueEmrCode() {
	m.unique_emr_code = nil
	delete(m.clearedFields, item.FieldUniqueEmrCode)
}

// SetTaxCode sets the "tax_code" field.
func (m *ItemMutation) SetTaxCode(s string) {
	m.tax_code = &s
}

// TaxCode returns the value of the "tax_code" field in the mutation.
func (m *ItemMutation) TaxCode() (r string, exists bool) {
	v := m.tax_code
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxCode returns the old "tax_code" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldTaxCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxCode: %w", err)
	}
	return oldValue.TaxCode, nil
}

// ClearTaxCode clears the value of the "tax_code" field.
func (m *ItemMutation) ClearTaxCode() {
	m.tax_code = nil
	m.clearedFields[item.FieldTaxCode] = struct{}{}
}

// TaxCodeCleared returns if the "tax_code" field was cleared in this mutation.
func (m *ItemMutation) TaxCodeCleared() bool {
	_, ok := m.clearedFields[item.FieldTaxCode]
	return ok
}

// ResetTaxCode resets all changes to the "tax_code" field.
func (m *ItemMutation) ResetTaxCode() {
	m.tax_code = nil
	delete(m.clearedFields, item.FieldTaxCode)
}

// SetWeblink sets the "weblink" field.
func (m *ItemMutation) SetWeblink(s string) {
	m.weblink = &s
}

// Weblink returns the value of the "weblink" field in the mutation.
func (m *ItemMutation) Weblink() (r string, exists bool) {
	v := m.weblink
	if v == nil {
		return
	}
	return *v, true
}

// OldWeblink returns the old "weblink" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldWeblink(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeblink is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeblink requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeblink: %w", err)
	}
	return oldValue.Weblink, nil
}

// ClearWeblink clears the value of the "weblink" field.
func (m *ItemMutation) ClearWeblink() {
	m.weblink = nil
	m.clearedFields[item.FieldWeblink] = struct{}{}
}

// WeblinkCleared returns if the "weblink" field was cleared in this mutation.
func (m *ItemMutation) WeblinkCleared() bool {
	_, ok := m.clearedFields[item.FieldWeblink]
	return ok
}

// ResetWeblink resets all changes to the "weblink" field.
func (m *ItemMutation) ResetWeblink() {
	m.weblink = nil
	delete(m.clearedFields, item.FieldWeblink)
}

// SetDescription sets the "description" field.
func (m *ItemMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ItemMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ItemMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[item.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ItemMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[item.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ItemMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, item.FieldDescription)
}

// SetSampleTypeList sets the "sample_type_list" field.
func (m *ItemMutation) SetSampleTypeList(s []string) {
	m.sample_type_list = &s
}

// SampleTypeList returns the value of the "sample_type_list" field in the mutation.
func (m *ItemMutation) SampleTypeList() (r []string, exists bool) {
	v := m.sample_type_list
	if v == nil {
		return
	}
	return *v, true
}

// OldSampleTypeList returns the old "sample_type_list" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSampleTypeList(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSampleTypeList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSampleTypeList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSampleTypeList: %w", err)
	}
	return oldValue.SampleTypeList, nil
}

// ClearSampleTypeList clears the value of the "sample_type_list" field.
func (m *ItemMutation) ClearSampleTypeList() {
	m.sample_type_list = nil
	m.clearedFields[item.FieldSampleTypeList] = struct{}{}
}

// SampleTypeListCleared returns if the "sample_type_list" field was cleared in this mutation.
func (m *ItemMutation) SampleTypeListCleared() bool {
	_, ok := m.clearedFields[item.FieldSampleTypeList]
	return ok
}

// ResetSampleTypeList resets all changes to the "sample_type_list" field.
func (m *ItemMutation) ResetSampleTypeList() {
	m.sample_type_list = nil
	delete(m.clearedFields, item.FieldSampleTypeList)
}

// SetSubpackagesList sets the "subpackages_list" field.
func (m *ItemMutation) SetSubpackagesList(s []string) {
	m.subpackages_list = &s
}

// SubpackagesList returns the value of the "subpackages_list" field in the mutation.
func (m *ItemMutation) SubpackagesList() (r []string, exists bool) {
	v := m.subpackages_list
	if v == nil {
		return
	}
	return *v, true
}

// OldSubpackagesList returns the old "subpackages_list" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSubpackagesList(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubpackagesList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubpackagesList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubpackagesList: %w", err)
	}
	return oldValue.SubpackagesList, nil
}

// ClearSubpackagesList clears the value of the "subpackages_list" field.
func (m *ItemMutation) ClearSubpackagesList() {
	m.subpackages_list = nil
	m.clearedFields[item.FieldSubpackagesList] = struct{}{}
}

// SubpackagesListCleared returns if the "subpackages_list" field was cleared in this mutation.
func (m *ItemMutation) SubpackagesListCleared() bool {
	_, ok := m.clearedFields[item.FieldSubpackagesList]
	return ok
}

// ResetSubpackagesList resets all changes to the "subpackages_list" field.
func (m *ItemMutation) ResetSubpackagesList() {
	m.subpackages_list = nil
	delete(m.clearedFields, item.FieldSubpackagesList)
}

// SetSubtestsList sets the "subtests_list" field.
func (m *ItemMutation) SetSubtestsList(s []string) {
	m.subtests_list = &s
}

// SubtestsList returns the value of the "subtests_list" field in the mutation.
func (m *ItemMutation) SubtestsList() (r []string, exists bool) {
	v := m.subtests_list
	if v == nil {
		return
	}
	return *v, true
}

// OldSubtestsList returns the old "subtests_list" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldSubtestsList(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubtestsList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubtestsList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubtestsList: %w", err)
	}
	return oldValue.SubtestsList, nil
}

// ClearSubtestsList clears the value of the "subtests_list" field.
func (m *ItemMutation) ClearSubtestsList() {
	m.subtests_list = nil
	m.clearedFields[item.FieldSubtestsList] = struct{}{}
}

// SubtestsListCleared returns if the "subtests_list" field was cleared in this mutation.
func (m *ItemMutation) SubtestsListCleared() bool {
	_, ok := m.clearedFields[item.FieldSubtestsList]
	return ok
}

// ResetSubtestsList resets all changes to the "subtests_list" field.
func (m *ItemMutation) ResetSubtestsList() {
	m.subtests_list = nil
	delete(m.clearedFields, item.FieldSubtestsList)
}

// SetCreatedAt sets the "created_at" field.
func (m *ItemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ItemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ItemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ItemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ItemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ItemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ItemMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ItemMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Item entity.
// If the Item object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ItemMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ItemMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[item.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ItemMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[item.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ItemMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, item.FieldDeletedAt)
}

// Where appends a list predicates to the ItemMutation builder.
func (m *ItemMutation) Where(ps ...predicate.Item) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Item).
func (m *ItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ItemMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m._type != nil {
		fields = append(fields, item.FieldType)
	}
	if m.type_id != nil {
		fields = append(fields, item.FieldTypeID)
	}
	if m.order_type_id != nil {
		fields = append(fields, item.FieldOrderTypeID)
	}
	if m.is_orderable != nil {
		fields = append(fields, item.FieldIsOrderable)
	}
	if m.name != nil {
		fields = append(fields, item.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, item.FieldDisplayName)
	}
	if m.unique_emr_code != nil {
		fields = append(fields, item.FieldUniqueEmrCode)
	}
	if m.tax_code != nil {
		fields = append(fields, item.FieldTaxCode)
	}
	if m.weblink != nil {
		fields = append(fields, item.FieldWeblink)
	}
	if m.description != nil {
		fields = append(fields, item.FieldDescription)
	}
	if m.sample_type_list != nil {
		fields = append(fields, item.FieldSampleTypeList)
	}
	if m.subpackages_list != nil {
		fields = append(fields, item.FieldSubpackagesList)
	}
	if m.subtests_list != nil {
		fields = append(fields, item.FieldSubtestsList)
	}
	if m.created_at != nil {
		fields = append(fields, item.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, item.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, item.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case item.FieldType:
		return m.GetType()
	case item.FieldTypeID:
		return m.TypeID()
	case item.FieldOrderTypeID:
		return m.OrderTypeID()
	case item.FieldIsOrderable:
		return m.IsOrderable()
	case item.FieldName:
		return m.Name()
	case item.FieldDisplayName:
		return m.DisplayName()
	case item.FieldUniqueEmrCode:
		return m.UniqueEmrCode()
	case item.FieldTaxCode:
		return m.TaxCode()
	case item.FieldWeblink:
		return m.Weblink()
	case item.FieldDescription:
		return m.Description()
	case item.FieldSampleTypeList:
		return m.SampleTypeList()
	case item.FieldSubpackagesList:
		return m.SubpackagesList()
	case item.FieldSubtestsList:
		return m.SubtestsList()
	case item.FieldCreatedAt:
		return m.CreatedAt()
	case item.FieldUpdatedAt:
		return m.UpdatedAt()
	case item.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case item.FieldType:
		return m.OldType(ctx)
	case item.FieldTypeID:
		return m.OldTypeID(ctx)
	case item.FieldOrderTypeID:
		return m.OldOrderTypeID(ctx)
	case item.FieldIsOrderable:
		return m.OldIsOrderable(ctx)
	case item.FieldName:
		return m.OldName(ctx)
	case item.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case item.FieldUniqueEmrCode:
		return m.OldUniqueEmrCode(ctx)
	case item.FieldTaxCode:
		return m.OldTaxCode(ctx)
	case item.FieldWeblink:
		return m.OldWeblink(ctx)
	case item.FieldDescription:
		return m.OldDescription(ctx)
	case item.FieldSampleTypeList:
		return m.OldSampleTypeList(ctx)
	case item.FieldSubpackagesList:
		return m.OldSubpackagesList(ctx)
	case item.FieldSubtestsList:
		return m.OldSubtestsList(ctx)
	case item.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case item.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case item.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Item field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case item.FieldType:
		v, ok := value.(item.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case item.FieldTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeID(v)
		return nil
	case item.FieldOrderTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderTypeID(v)
		return nil
	case item.FieldIsOrderable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOrderable(v)
		return nil
	case item.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case item.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case item.FieldUniqueEmrCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUniqueEmrCode(v)
		return nil
	case item.FieldTaxCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxCode(v)
		return nil
	case item.FieldWeblink:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeblink(v)
		return nil
	case item.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case item.FieldSampleTypeList:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSampleTypeList(v)
		return nil
	case item.FieldSubpackagesList:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubpackagesList(v)
		return nil
	case item.FieldSubtestsList:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubtestsList(v)
		return nil
	case item.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case item.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case item.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ItemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ItemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Item numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(item.FieldOrderTypeID) {
		fields = append(fields, item.FieldOrderTypeID)
	}
	if m.FieldCleared(item.FieldName) {
		fields = append(fields, item.FieldName)
	}
	if m.FieldCleared(item.FieldDisplayName) {
		fields = append(fields, item.FieldDisplayName)
	}
	if m.FieldCleared(item.FieldUniqueEmrCode) {
		fields = append(fields, item.FieldUniqueEmrCode)
	}
	if m.FieldCleared(item.FieldTaxCode) {
		fields = append(fields, item.FieldTaxCode)
	}
	if m.FieldCleared(item.FieldWeblink) {
		fields = append(fields, item.FieldWeblink)
	}
	if m.FieldCleared(item.FieldDescription) {
		fields = append(fields, item.FieldDescription)
	}
	if m.FieldCleared(item.FieldSampleTypeList) {
		fields = append(fields, item.FieldSampleTypeList)
	}
	if m.FieldCleared(item.FieldSubpackagesList) {
		fields = append(fields, item.FieldSubpackagesList)
	}
	if m.FieldCleared(item.FieldSubtestsList) {
		fields = append(fields, item.FieldSubtestsList)
	}
	if m.FieldCleared(item.FieldDeletedAt) {
		fields = append(fields, item.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ItemMutation) ClearField(name string) error {
	switch name {
	case item.FieldOrderTypeID:
		m.ClearOrderTypeID()
		return nil
	case item.FieldName:
		m.ClearName()
		return nil
	case item.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	case item.FieldUniqueEmrCode:
		m.ClearUniqueEmrCode()
		return nil
	case item.FieldTaxCode:
		m.ClearTaxCode()
		return nil
	case item.FieldWeblink:
		m.ClearWeblink()
		return nil
	case item.FieldDescription:
		m.ClearDescription()
		return nil
	case item.FieldSampleTypeList:
		m.ClearSampleTypeList()
		return nil
	case item.FieldSubpackagesList:
		m.ClearSubpackagesList()
		return nil
	case item.FieldSubtestsList:
		m.ClearSubtestsList()
		return nil
	case item.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Item nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ItemMutation) ResetField(name string) error {
	switch name {
	case item.FieldType:
		m.ResetType()
		return nil
	case item.FieldTypeID:
		m.ResetTypeID()
		return nil
	case item.FieldOrderTypeID:
		m.ResetOrderTypeID()
		return nil
	case item.FieldIsOrderable:
		m.ResetIsOrderable()
		return nil
	case item.FieldName:
		m.ResetName()
		return nil
	case item.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case item.FieldUniqueEmrCode:
		m.ResetUniqueEmrCode()
		return nil
	case item.FieldTaxCode:
		m.ResetTaxCode()
		return nil
	case item.FieldWeblink:
		m.ResetWeblink()
		return nil
	case item.FieldDescription:
		m.ResetDescription()
		return nil
	case item.FieldSampleTypeList:
		m.ResetSampleTypeList()
		return nil
	case item.FieldSubpackagesList:
		m.ResetSubpackagesList()
		return nil
	case item.FieldSubtestsList:
		m.ResetSubtestsList()
		return nil
	case item.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case item.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case item.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Item field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Item unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Item edge %s", name)
}

// MerchandiseMutation represents an operation that mutates the Merchandise nodes in the graph.
type MerchandiseMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_type               *merchandise.Type
	type_id             *string
	stock               *int
	addstock            *int
	pending_period      *int
	addpending_period   *int
	name                *string
	display_name        *string
	picture_url         *string
	description         *string
	price               *float64
	addprice            *float64
	refundable_ratio    *float64
	addrefundable_ratio *float64
	deduction_ratio     *float64
	adddeduction_ratio  *float64
	deduction_reason    *string
	created_at          *time.Time
	updated_at          *time.Time
	deleted_at          *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Merchandise, error)
	predicates          []predicate.Merchandise
}

var _ ent.Mutation = (*MerchandiseMutation)(nil)

// merchandiseOption allows management of the mutation configuration using functional options.
type merchandiseOption func(*MerchandiseMutation)

// newMerchandiseMutation creates new mutation for the Merchandise entity.
func newMerchandiseMutation(c config, op Op, opts ...merchandiseOption) *MerchandiseMutation {
	m := &MerchandiseMutation{
		config:        c,
		op:            op,
		typ:           TypeMerchandise,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMerchandiseID sets the ID field of the mutation.
func withMerchandiseID(id int) merchandiseOption {
	return func(m *MerchandiseMutation) {
		var (
			err   error
			once  sync.Once
			value *Merchandise
		)
		m.oldValue = func(ctx context.Context) (*Merchandise, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Merchandise.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMerchandise sets the old Merchandise of the mutation.
func withMerchandise(node *Merchandise) merchandiseOption {
	return func(m *MerchandiseMutation) {
		m.oldValue = func(context.Context) (*Merchandise, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MerchandiseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MerchandiseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MerchandiseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MerchandiseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Merchandise.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *MerchandiseMutation) SetType(value merchandise.Type) {
	m._type = &value
}

// GetType returns the value of the "type" field in the mutation.
func (m *MerchandiseMutation) GetType() (r merchandise.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldType(ctx context.Context) (v merchandise.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *MerchandiseMutation) ResetType() {
	m._type = nil
}

// SetTypeID sets the "type_id" field.
func (m *MerchandiseMutation) SetTypeID(s string) {
	m.type_id = &s
}

// TypeID returns the value of the "type_id" field in the mutation.
func (m *MerchandiseMutation) TypeID() (r string, exists bool) {
	v := m.type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTypeID returns the old "type_id" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldTypeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTypeID: %w", err)
	}
	return oldValue.TypeID, nil
}

// ClearTypeID clears the value of the "type_id" field.
func (m *MerchandiseMutation) ClearTypeID() {
	m.type_id = nil
	m.clearedFields[merchandise.FieldTypeID] = struct{}{}
}

// TypeIDCleared returns if the "type_id" field was cleared in this mutation.
func (m *MerchandiseMutation) TypeIDCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldTypeID]
	return ok
}

// ResetTypeID resets all changes to the "type_id" field.
func (m *MerchandiseMutation) ResetTypeID() {
	m.type_id = nil
	delete(m.clearedFields, merchandise.FieldTypeID)
}

// SetStock sets the "stock" field.
func (m *MerchandiseMutation) SetStock(i int) {
	m.stock = &i
	m.addstock = nil
}

// Stock returns the value of the "stock" field in the mutation.
func (m *MerchandiseMutation) Stock() (r int, exists bool) {
	v := m.stock
	if v == nil {
		return
	}
	return *v, true
}

// OldStock returns the old "stock" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldStock(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStock is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStock requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStock: %w", err)
	}
	return oldValue.Stock, nil
}

// AddStock adds i to the "stock" field.
func (m *MerchandiseMutation) AddStock(i int) {
	if m.addstock != nil {
		*m.addstock += i
	} else {
		m.addstock = &i
	}
}

// AddedStock returns the value that was added to the "stock" field in this mutation.
func (m *MerchandiseMutation) AddedStock() (r int, exists bool) {
	v := m.addstock
	if v == nil {
		return
	}
	return *v, true
}

// ResetStock resets all changes to the "stock" field.
func (m *MerchandiseMutation) ResetStock() {
	m.stock = nil
	m.addstock = nil
}

// SetPendingPeriod sets the "pending_period" field.
func (m *MerchandiseMutation) SetPendingPeriod(i int) {
	m.pending_period = &i
	m.addpending_period = nil
}

// PendingPeriod returns the value of the "pending_period" field in the mutation.
func (m *MerchandiseMutation) PendingPeriod() (r int, exists bool) {
	v := m.pending_period
	if v == nil {
		return
	}
	return *v, true
}

// OldPendingPeriod returns the old "pending_period" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldPendingPeriod(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPendingPeriod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPendingPeriod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPendingPeriod: %w", err)
	}
	return oldValue.PendingPeriod, nil
}

// AddPendingPeriod adds i to the "pending_period" field.
func (m *MerchandiseMutation) AddPendingPeriod(i int) {
	if m.addpending_period != nil {
		*m.addpending_period += i
	} else {
		m.addpending_period = &i
	}
}

// AddedPendingPeriod returns the value that was added to the "pending_period" field in this mutation.
func (m *MerchandiseMutation) AddedPendingPeriod() (r int, exists bool) {
	v := m.addpending_period
	if v == nil {
		return
	}
	return *v, true
}

// ResetPendingPeriod resets all changes to the "pending_period" field.
func (m *MerchandiseMutation) ResetPendingPeriod() {
	m.pending_period = nil
	m.addpending_period = nil
}

// SetName sets the "name" field.
func (m *MerchandiseMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MerchandiseMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *MerchandiseMutation) ClearName() {
	m.name = nil
	m.clearedFields[merchandise.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *MerchandiseMutation) NameCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *MerchandiseMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, merchandise.FieldName)
}

// SetDisplayName sets the "display_name" field.
func (m *MerchandiseMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *MerchandiseMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *MerchandiseMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[merchandise.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *MerchandiseMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *MerchandiseMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, merchandise.FieldDisplayName)
}

// SetPictureURL sets the "picture_url" field.
func (m *MerchandiseMutation) SetPictureURL(s string) {
	m.picture_url = &s
}

// PictureURL returns the value of the "picture_url" field in the mutation.
func (m *MerchandiseMutation) PictureURL() (r string, exists bool) {
	v := m.picture_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPictureURL returns the old "picture_url" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldPictureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPictureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPictureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPictureURL: %w", err)
	}
	return oldValue.PictureURL, nil
}

// ClearPictureURL clears the value of the "picture_url" field.
func (m *MerchandiseMutation) ClearPictureURL() {
	m.picture_url = nil
	m.clearedFields[merchandise.FieldPictureURL] = struct{}{}
}

// PictureURLCleared returns if the "picture_url" field was cleared in this mutation.
func (m *MerchandiseMutation) PictureURLCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldPictureURL]
	return ok
}

// ResetPictureURL resets all changes to the "picture_url" field.
func (m *MerchandiseMutation) ResetPictureURL() {
	m.picture_url = nil
	delete(m.clearedFields, merchandise.FieldPictureURL)
}

// SetDescription sets the "description" field.
func (m *MerchandiseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MerchandiseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MerchandiseMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[merchandise.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MerchandiseMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MerchandiseMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, merchandise.FieldDescription)
}

// SetPrice sets the "price" field.
func (m *MerchandiseMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *MerchandiseMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *MerchandiseMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *MerchandiseMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ClearPrice clears the value of the "price" field.
func (m *MerchandiseMutation) ClearPrice() {
	m.price = nil
	m.addprice = nil
	m.clearedFields[merchandise.FieldPrice] = struct{}{}
}

// PriceCleared returns if the "price" field was cleared in this mutation.
func (m *MerchandiseMutation) PriceCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldPrice]
	return ok
}

// ResetPrice resets all changes to the "price" field.
func (m *MerchandiseMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
	delete(m.clearedFields, merchandise.FieldPrice)
}

// SetRefundableRatio sets the "refundable_ratio" field.
func (m *MerchandiseMutation) SetRefundableRatio(f float64) {
	m.refundable_ratio = &f
	m.addrefundable_ratio = nil
}

// RefundableRatio returns the value of the "refundable_ratio" field in the mutation.
func (m *MerchandiseMutation) RefundableRatio() (r float64, exists bool) {
	v := m.refundable_ratio
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundableRatio returns the old "refundable_ratio" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldRefundableRatio(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundableRatio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundableRatio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundableRatio: %w", err)
	}
	return oldValue.RefundableRatio, nil
}

// AddRefundableRatio adds f to the "refundable_ratio" field.
func (m *MerchandiseMutation) AddRefundableRatio(f float64) {
	if m.addrefundable_ratio != nil {
		*m.addrefundable_ratio += f
	} else {
		m.addrefundable_ratio = &f
	}
}

// AddedRefundableRatio returns the value that was added to the "refundable_ratio" field in this mutation.
func (m *MerchandiseMutation) AddedRefundableRatio() (r float64, exists bool) {
	v := m.addrefundable_ratio
	if v == nil {
		return
	}
	return *v, true
}

// ClearRefundableRatio clears the value of the "refundable_ratio" field.
func (m *MerchandiseMutation) ClearRefundableRatio() {
	m.refundable_ratio = nil
	m.addrefundable_ratio = nil
	m.clearedFields[merchandise.FieldRefundableRatio] = struct{}{}
}

// RefundableRatioCleared returns if the "refundable_ratio" field was cleared in this mutation.
func (m *MerchandiseMutation) RefundableRatioCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldRefundableRatio]
	return ok
}

// ResetRefundableRatio resets all changes to the "refundable_ratio" field.
func (m *MerchandiseMutation) ResetRefundableRatio() {
	m.refundable_ratio = nil
	m.addrefundable_ratio = nil
	delete(m.clearedFields, merchandise.FieldRefundableRatio)
}

// SetDeductionRatio sets the "deduction_ratio" field.
func (m *MerchandiseMutation) SetDeductionRatio(f float64) {
	m.deduction_ratio = &f
	m.adddeduction_ratio = nil
}

// DeductionRatio returns the value of the "deduction_ratio" field in the mutation.
func (m *MerchandiseMutation) DeductionRatio() (r float64, exists bool) {
	v := m.deduction_ratio
	if v == nil {
		return
	}
	return *v, true
}

// OldDeductionRatio returns the old "deduction_ratio" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDeductionRatio(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeductionRatio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeductionRatio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeductionRatio: %w", err)
	}
	return oldValue.DeductionRatio, nil
}

// AddDeductionRatio adds f to the "deduction_ratio" field.
func (m *MerchandiseMutation) AddDeductionRatio(f float64) {
	if m.adddeduction_ratio != nil {
		*m.adddeduction_ratio += f
	} else {
		m.adddeduction_ratio = &f
	}
}

// AddedDeductionRatio returns the value that was added to the "deduction_ratio" field in this mutation.
func (m *MerchandiseMutation) AddedDeductionRatio() (r float64, exists bool) {
	v := m.adddeduction_ratio
	if v == nil {
		return
	}
	return *v, true
}

// ClearDeductionRatio clears the value of the "deduction_ratio" field.
func (m *MerchandiseMutation) ClearDeductionRatio() {
	m.deduction_ratio = nil
	m.adddeduction_ratio = nil
	m.clearedFields[merchandise.FieldDeductionRatio] = struct{}{}
}

// DeductionRatioCleared returns if the "deduction_ratio" field was cleared in this mutation.
func (m *MerchandiseMutation) DeductionRatioCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDeductionRatio]
	return ok
}

// ResetDeductionRatio resets all changes to the "deduction_ratio" field.
func (m *MerchandiseMutation) ResetDeductionRatio() {
	m.deduction_ratio = nil
	m.adddeduction_ratio = nil
	delete(m.clearedFields, merchandise.FieldDeductionRatio)
}

// SetDeductionReason sets the "deduction_reason" field.
func (m *MerchandiseMutation) SetDeductionReason(s string) {
	m.deduction_reason = &s
}

// DeductionReason returns the value of the "deduction_reason" field in the mutation.
func (m *MerchandiseMutation) DeductionReason() (r string, exists bool) {
	v := m.deduction_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldDeductionReason returns the old "deduction_reason" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDeductionReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeductionReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeductionReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeductionReason: %w", err)
	}
	return oldValue.DeductionReason, nil
}

// ClearDeductionReason clears the value of the "deduction_reason" field.
func (m *MerchandiseMutation) ClearDeductionReason() {
	m.deduction_reason = nil
	m.clearedFields[merchandise.FieldDeductionReason] = struct{}{}
}

// DeductionReasonCleared returns if the "deduction_reason" field was cleared in this mutation.
func (m *MerchandiseMutation) DeductionReasonCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDeductionReason]
	return ok
}

// ResetDeductionReason resets all changes to the "deduction_reason" field.
func (m *MerchandiseMutation) ResetDeductionReason() {
	m.deduction_reason = nil
	delete(m.clearedFields, merchandise.FieldDeductionReason)
}

// SetCreatedAt sets the "created_at" field.
func (m *MerchandiseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MerchandiseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MerchandiseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MerchandiseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MerchandiseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MerchandiseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MerchandiseMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MerchandiseMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Merchandise entity.
// If the Merchandise object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MerchandiseMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *MerchandiseMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[merchandise.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *MerchandiseMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[merchandise.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MerchandiseMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, merchandise.FieldDeletedAt)
}

// Where appends a list predicates to the MerchandiseMutation builder.
func (m *MerchandiseMutation) Where(ps ...predicate.Merchandise) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MerchandiseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Merchandise).
func (m *MerchandiseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MerchandiseMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m._type != nil {
		fields = append(fields, merchandise.FieldType)
	}
	if m.type_id != nil {
		fields = append(fields, merchandise.FieldTypeID)
	}
	if m.stock != nil {
		fields = append(fields, merchandise.FieldStock)
	}
	if m.pending_period != nil {
		fields = append(fields, merchandise.FieldPendingPeriod)
	}
	if m.name != nil {
		fields = append(fields, merchandise.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, merchandise.FieldDisplayName)
	}
	if m.picture_url != nil {
		fields = append(fields, merchandise.FieldPictureURL)
	}
	if m.description != nil {
		fields = append(fields, merchandise.FieldDescription)
	}
	if m.price != nil {
		fields = append(fields, merchandise.FieldPrice)
	}
	if m.refundable_ratio != nil {
		fields = append(fields, merchandise.FieldRefundableRatio)
	}
	if m.deduction_ratio != nil {
		fields = append(fields, merchandise.FieldDeductionRatio)
	}
	if m.deduction_reason != nil {
		fields = append(fields, merchandise.FieldDeductionReason)
	}
	if m.created_at != nil {
		fields = append(fields, merchandise.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, merchandise.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, merchandise.FieldDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MerchandiseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case merchandise.FieldType:
		return m.GetType()
	case merchandise.FieldTypeID:
		return m.TypeID()
	case merchandise.FieldStock:
		return m.Stock()
	case merchandise.FieldPendingPeriod:
		return m.PendingPeriod()
	case merchandise.FieldName:
		return m.Name()
	case merchandise.FieldDisplayName:
		return m.DisplayName()
	case merchandise.FieldPictureURL:
		return m.PictureURL()
	case merchandise.FieldDescription:
		return m.Description()
	case merchandise.FieldPrice:
		return m.Price()
	case merchandise.FieldRefundableRatio:
		return m.RefundableRatio()
	case merchandise.FieldDeductionRatio:
		return m.DeductionRatio()
	case merchandise.FieldDeductionReason:
		return m.DeductionReason()
	case merchandise.FieldCreatedAt:
		return m.CreatedAt()
	case merchandise.FieldUpdatedAt:
		return m.UpdatedAt()
	case merchandise.FieldDeletedAt:
		return m.DeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MerchandiseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case merchandise.FieldType:
		return m.OldType(ctx)
	case merchandise.FieldTypeID:
		return m.OldTypeID(ctx)
	case merchandise.FieldStock:
		return m.OldStock(ctx)
	case merchandise.FieldPendingPeriod:
		return m.OldPendingPeriod(ctx)
	case merchandise.FieldName:
		return m.OldName(ctx)
	case merchandise.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case merchandise.FieldPictureURL:
		return m.OldPictureURL(ctx)
	case merchandise.FieldDescription:
		return m.OldDescription(ctx)
	case merchandise.FieldPrice:
		return m.OldPrice(ctx)
	case merchandise.FieldRefundableRatio:
		return m.OldRefundableRatio(ctx)
	case merchandise.FieldDeductionRatio:
		return m.OldDeductionRatio(ctx)
	case merchandise.FieldDeductionReason:
		return m.OldDeductionReason(ctx)
	case merchandise.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case merchandise.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case merchandise.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Merchandise field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchandiseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case merchandise.FieldType:
		v, ok := value.(merchandise.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case merchandise.FieldTypeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTypeID(v)
		return nil
	case merchandise.FieldStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStock(v)
		return nil
	case merchandise.FieldPendingPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPendingPeriod(v)
		return nil
	case merchandise.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case merchandise.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case merchandise.FieldPictureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPictureURL(v)
		return nil
	case merchandise.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case merchandise.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case merchandise.FieldRefundableRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundableRatio(v)
		return nil
	case merchandise.FieldDeductionRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeductionRatio(v)
		return nil
	case merchandise.FieldDeductionReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeductionReason(v)
		return nil
	case merchandise.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case merchandise.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case merchandise.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Merchandise field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MerchandiseMutation) AddedFields() []string {
	var fields []string
	if m.addstock != nil {
		fields = append(fields, merchandise.FieldStock)
	}
	if m.addpending_period != nil {
		fields = append(fields, merchandise.FieldPendingPeriod)
	}
	if m.addprice != nil {
		fields = append(fields, merchandise.FieldPrice)
	}
	if m.addrefundable_ratio != nil {
		fields = append(fields, merchandise.FieldRefundableRatio)
	}
	if m.adddeduction_ratio != nil {
		fields = append(fields, merchandise.FieldDeductionRatio)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MerchandiseMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case merchandise.FieldStock:
		return m.AddedStock()
	case merchandise.FieldPendingPeriod:
		return m.AddedPendingPeriod()
	case merchandise.FieldPrice:
		return m.AddedPrice()
	case merchandise.FieldRefundableRatio:
		return m.AddedRefundableRatio()
	case merchandise.FieldDeductionRatio:
		return m.AddedDeductionRatio()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MerchandiseMutation) AddField(name string, value ent.Value) error {
	switch name {
	case merchandise.FieldStock:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStock(v)
		return nil
	case merchandise.FieldPendingPeriod:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPendingPeriod(v)
		return nil
	case merchandise.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case merchandise.FieldRefundableRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRefundableRatio(v)
		return nil
	case merchandise.FieldDeductionRatio:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeductionRatio(v)
		return nil
	}
	return fmt.Errorf("unknown Merchandise numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MerchandiseMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(merchandise.FieldTypeID) {
		fields = append(fields, merchandise.FieldTypeID)
	}
	if m.FieldCleared(merchandise.FieldName) {
		fields = append(fields, merchandise.FieldName)
	}
	if m.FieldCleared(merchandise.FieldDisplayName) {
		fields = append(fields, merchandise.FieldDisplayName)
	}
	if m.FieldCleared(merchandise.FieldPictureURL) {
		fields = append(fields, merchandise.FieldPictureURL)
	}
	if m.FieldCleared(merchandise.FieldDescription) {
		fields = append(fields, merchandise.FieldDescription)
	}
	if m.FieldCleared(merchandise.FieldPrice) {
		fields = append(fields, merchandise.FieldPrice)
	}
	if m.FieldCleared(merchandise.FieldRefundableRatio) {
		fields = append(fields, merchandise.FieldRefundableRatio)
	}
	if m.FieldCleared(merchandise.FieldDeductionRatio) {
		fields = append(fields, merchandise.FieldDeductionRatio)
	}
	if m.FieldCleared(merchandise.FieldDeductionReason) {
		fields = append(fields, merchandise.FieldDeductionReason)
	}
	if m.FieldCleared(merchandise.FieldDeletedAt) {
		fields = append(fields, merchandise.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MerchandiseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MerchandiseMutation) ClearField(name string) error {
	switch name {
	case merchandise.FieldTypeID:
		m.ClearTypeID()
		return nil
	case merchandise.FieldName:
		m.ClearName()
		return nil
	case merchandise.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	case merchandise.FieldPictureURL:
		m.ClearPictureURL()
		return nil
	case merchandise.FieldDescription:
		m.ClearDescription()
		return nil
	case merchandise.FieldPrice:
		m.ClearPrice()
		return nil
	case merchandise.FieldRefundableRatio:
		m.ClearRefundableRatio()
		return nil
	case merchandise.FieldDeductionRatio:
		m.ClearDeductionRatio()
		return nil
	case merchandise.FieldDeductionReason:
		m.ClearDeductionReason()
		return nil
	case merchandise.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Merchandise nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MerchandiseMutation) ResetField(name string) error {
	switch name {
	case merchandise.FieldType:
		m.ResetType()
		return nil
	case merchandise.FieldTypeID:
		m.ResetTypeID()
		return nil
	case merchandise.FieldStock:
		m.ResetStock()
		return nil
	case merchandise.FieldPendingPeriod:
		m.ResetPendingPeriod()
		return nil
	case merchandise.FieldName:
		m.ResetName()
		return nil
	case merchandise.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case merchandise.FieldPictureURL:
		m.ResetPictureURL()
		return nil
	case merchandise.FieldDescription:
		m.ResetDescription()
		return nil
	case merchandise.FieldPrice:
		m.ResetPrice()
		return nil
	case merchandise.FieldRefundableRatio:
		m.ResetRefundableRatio()
		return nil
	case merchandise.FieldDeductionRatio:
		m.ResetDeductionRatio()
		return nil
	case merchandise.FieldDeductionReason:
		m.ResetDeductionReason()
		return nil
	case merchandise.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case merchandise.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case merchandise.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Merchandise field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MerchandiseMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MerchandiseMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MerchandiseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MerchandiseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MerchandiseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MerchandiseMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MerchandiseMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Merchandise unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MerchandiseMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Merchandise edge %s", name)
}
