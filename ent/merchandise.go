// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"productCatalog/ent/merchandise"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Merchandise is the model entity for the Merchandise schema.
type Merchandise struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type merchandise.Type `json:"type,omitempty"`
	// TypeID holds the value of the "type_id" field.
	TypeID string `json:"type_id,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock int `json:"stock,omitempty"`
	// PendingPeriod holds the value of the "pending_period" field.
	PendingPeriod int `json:"pending_period,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// PictureURL holds the value of the "picture_url" field.
	PictureURL string `json:"picture_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// RefundableRatio holds the value of the "refundable_ratio" field.
	RefundableRatio float64 `json:"refundable_ratio,omitempty"`
	// DeductionRatio holds the value of the "deduction_ratio" field.
	DeductionRatio float64 `json:"deduction_ratio,omitempty"`
	// DeductionReason holds the value of the "deduction_reason" field.
	DeductionReason string `json:"deduction_reason,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchandise) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchandise.FieldPrice, merchandise.FieldRefundableRatio, merchandise.FieldDeductionRatio:
			values[i] = new(sql.NullFloat64)
		case merchandise.FieldID, merchandise.FieldStock, merchandise.FieldPendingPeriod:
			values[i] = new(sql.NullInt64)
		case merchandise.FieldType, merchandise.FieldTypeID, merchandise.FieldName, merchandise.FieldDisplayName, merchandise.FieldPictureURL, merchandise.FieldDescription, merchandise.FieldDeductionReason:
			values[i] = new(sql.NullString)
		case merchandise.FieldCreatedAt, merchandise.FieldUpdatedAt, merchandise.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Merchandise", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchandise fields.
func (m *Merchandise) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchandise.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case merchandise.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				m.Type = merchandise.Type(value.String)
			}
		case merchandise.FieldTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type_id", values[i])
			} else if value.Valid {
				m.TypeID = value.String
			}
		case merchandise.FieldStock:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				m.Stock = int(value.Int64)
			}
		case merchandise.FieldPendingPeriod:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pending_period", values[i])
			} else if value.Valid {
				m.PendingPeriod = int(value.Int64)
			}
		case merchandise.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case merchandise.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				m.DisplayName = value.String
			}
		case merchandise.FieldPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture_url", values[i])
			} else if value.Valid {
				m.PictureURL = value.String
			}
		case merchandise.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case merchandise.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				m.Price = value.Float64
			}
		case merchandise.FieldRefundableRatio:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field refundable_ratio", values[i])
			} else if value.Valid {
				m.RefundableRatio = value.Float64
			}
		case merchandise.FieldDeductionRatio:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field deduction_ratio", values[i])
			} else if value.Valid {
				m.DeductionRatio = value.Float64
			}
		case merchandise.FieldDeductionReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deduction_reason", values[i])
			} else if value.Valid {
				m.DeductionReason = value.String
			}
		case merchandise.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case merchandise.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case merchandise.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = new(time.Time)
				*m.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Merchandise.
// Note that you need to call Merchandise.Unwrap() before calling this method if this Merchandise
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchandise) Update() *MerchandiseUpdateOne {
	return (&MerchandiseClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Merchandise entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Merchandise) Unwrap() *Merchandise {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Merchandise is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchandise) String() string {
	var builder strings.Builder
	builder.WriteString("Merchandise(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", m.Type))
	builder.WriteString(", type_id=")
	builder.WriteString(m.TypeID)
	builder.WriteString(", stock=")
	builder.WriteString(fmt.Sprintf("%v", m.Stock))
	builder.WriteString(", pending_period=")
	builder.WriteString(fmt.Sprintf("%v", m.PendingPeriod))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", display_name=")
	builder.WriteString(m.DisplayName)
	builder.WriteString(", picture_url=")
	builder.WriteString(m.PictureURL)
	builder.WriteString(", description=")
	builder.WriteString(m.Description)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", m.Price))
	builder.WriteString(", refundable_ratio=")
	builder.WriteString(fmt.Sprintf("%v", m.RefundableRatio))
	builder.WriteString(", deduction_ratio=")
	builder.WriteString(fmt.Sprintf("%v", m.DeductionRatio))
	builder.WriteString(", deduction_reason=")
	builder.WriteString(m.DeductionReason)
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	if v := m.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Merchandises is a parsable slice of Merchandise.
type Merchandises []*Merchandise

func (m Merchandises) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
