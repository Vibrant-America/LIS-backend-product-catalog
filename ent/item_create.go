// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"productCatalog/ent/item"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (ic *ItemCreate) SetType(i item.Type) *ItemCreate {
	ic.mutation.SetType(i)
	return ic
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ic *ItemCreate) SetNillableType(i *item.Type) *ItemCreate {
	if i != nil {
		ic.SetType(*i)
	}
	return ic
}

// SetTypeID sets the "type_id" field.
func (ic *ItemCreate) SetTypeID(s string) *ItemCreate {
	ic.mutation.SetTypeID(s)
	return ic
}

// SetOrderTypeID sets the "order_type_id" field.
func (ic *ItemCreate) SetOrderTypeID(s string) *ItemCreate {
	ic.mutation.SetOrderTypeID(s)
	return ic
}

// SetNillableOrderTypeID sets the "order_type_id" field if the given value is not nil.
func (ic *ItemCreate) SetNillableOrderTypeID(s *string) *ItemCreate {
	if s != nil {
		ic.SetOrderTypeID(*s)
	}
	return ic
}

// SetIsOrderable sets the "is_orderable" field.
func (ic *ItemCreate) SetIsOrderable(b bool) *ItemCreate {
	ic.mutation.SetIsOrderable(b)
	return ic
}

// SetNillableIsOrderable sets the "is_orderable" field if the given value is not nil.
func (ic *ItemCreate) SetNillableIsOrderable(b *bool) *ItemCreate {
	if b != nil {
		ic.SetIsOrderable(*b)
	}
	return ic
}

// SetName sets the "name" field.
func (ic *ItemCreate) SetName(s string) *ItemCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ic *ItemCreate) SetNillableName(s *string) *ItemCreate {
	if s != nil {
		ic.SetName(*s)
	}
	return ic
}

// SetDisplayName sets the "display_name" field.
func (ic *ItemCreate) SetDisplayName(s string) *ItemCreate {
	ic.mutation.SetDisplayName(s)
	return ic
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ic *ItemCreate) SetNillableDisplayName(s *string) *ItemCreate {
	if s != nil {
		ic.SetDisplayName(*s)
	}
	return ic
}

// SetUniqueEmrCode sets the "unique_emr_code" field.
func (ic *ItemCreate) SetUniqueEmrCode(s string) *ItemCreate {
	ic.mutation.SetUniqueEmrCode(s)
	return ic
}

// SetNillableUniqueEmrCode sets the "unique_emr_code" field if the given value is not nil.
func (ic *ItemCreate) SetNillableUniqueEmrCode(s *string) *ItemCreate {
	if s != nil {
		ic.SetUniqueEmrCode(*s)
	}
	return ic
}

// SetTaxCode sets the "tax_code" field.
func (ic *ItemCreate) SetTaxCode(s string) *ItemCreate {
	ic.mutation.SetTaxCode(s)
	return ic
}

// SetNillableTaxCode sets the "tax_code" field if the given value is not nil.
func (ic *ItemCreate) SetNillableTaxCode(s *string) *ItemCreate {
	if s != nil {
		ic.SetTaxCode(*s)
	}
	return ic
}

// SetWeblink sets the "weblink" field.
func (ic *ItemCreate) SetWeblink(s string) *ItemCreate {
	ic.mutation.SetWeblink(s)
	return ic
}

// SetNillableWeblink sets the "weblink" field if the given value is not nil.
func (ic *ItemCreate) SetNillableWeblink(s *string) *ItemCreate {
	if s != nil {
		ic.SetWeblink(*s)
	}
	return ic
}

// SetDescription sets the "description" field.
func (ic *ItemCreate) SetDescription(s string) *ItemCreate {
	ic.mutation.SetDescription(s)
	return ic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ic *ItemCreate) SetNillableDescription(s *string) *ItemCreate {
	if s != nil {
		ic.SetDescription(*s)
	}
	return ic
}

// SetSampleTypeList sets the "sample_type_list" field.
func (ic *ItemCreate) SetSampleTypeList(s []string) *ItemCreate {
	ic.mutation.SetSampleTypeList(s)
	return ic
}

// SetSubpackagesList sets the "subpackages_list" field.
func (ic *ItemCreate) SetSubpackagesList(s []string) *ItemCreate {
	ic.mutation.SetSubpackagesList(s)
	return ic
}

// SetSubtestsList sets the "subtests_list" field.
func (ic *ItemCreate) SetSubtestsList(s []string) *ItemCreate {
	ic.mutation.SetSubtestsList(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *ItemCreate) SetCreatedAt(t time.Time) *ItemCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *ItemCreate) SetNillableCreatedAt(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *ItemCreate) SetUpdatedAt(t time.Time) *ItemCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *ItemCreate) SetNillableUpdatedAt(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetDeletedAt sets the "deleted_at" field.
func (ic *ItemCreate) SetDeletedAt(t time.Time) *ItemCreate {
	ic.mutation.SetDeletedAt(t)
	return ic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ic *ItemCreate) SetNillableDeletedAt(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetDeletedAt(*t)
	}
	return ic
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ItemCreate) defaults() {
	if _, ok := ic.mutation.GetType(); !ok {
		v := item.DefaultType
		ic.mutation.SetType(v)
	}
	if _, ok := ic.mutation.IsOrderable(); !ok {
		v := item.DefaultIsOrderable
		ic.mutation.SetIsOrderable(v)
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := item.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := item.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Item.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := item.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Item.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "Item.type_id"`)}
	}
	if _, ok := ic.mutation.IsOrderable(); !ok {
		return &ValidationError{Name: "is_orderable", err: errors.New(`ent: missing required field "Item.is_orderable"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Item.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Item.updated_at"`)}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: item.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: item.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: item.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ic.mutation.TypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTypeID,
		})
		_node.TypeID = value
	}
	if value, ok := ic.mutation.OrderTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldOrderTypeID,
		})
		_node.OrderTypeID = value
	}
	if value, ok := ic.mutation.IsOrderable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: item.FieldIsOrderable,
		})
		_node.IsOrderable = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := ic.mutation.UniqueEmrCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldUniqueEmrCode,
		})
		_node.UniqueEmrCode = value
	}
	if value, ok := ic.mutation.TaxCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldTaxCode,
		})
		_node.TaxCode = value
	}
	if value, ok := ic.mutation.Weblink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldWeblink,
		})
		_node.Weblink = value
	}
	if value, ok := ic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: item.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := ic.mutation.SampleTypeList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSampleTypeList,
		})
		_node.SampleTypeList = value
	}
	if value, ok := ic.mutation.SubpackagesList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubpackagesList,
		})
		_node.SubpackagesList = value
	}
	if value, ok := ic.mutation.SubtestsList(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: item.FieldSubtestsList,
		})
		_node.SubtestsList = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
